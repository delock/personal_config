#!/home/akey/anaconda3/envs/ai/bin/python
#!/home/gma/miniforge3/bin/python
import os
import sys
import json
import requests
import PyPDF2
from bs4 import BeautifulSoup
from openai import OpenAI
from rich.console import Console
from rich.markdown import Markdown
from rich.live import Live
from urllib.parse import urlparse
from textual.app import App, ComposeResult
from textual.binding import Binding
from textual.reactive import var
from textual.widgets import Footer, Markdown, Input, Label
from textual.widget import Widget
from textual.worker import Worker, get_current_worker
from textual import work

console = Console()

def download_pdf(url, cache_dir="~/.cache/chatwithpdf"):
    if not os.path.exists(cache_dir):
        os.makedirs(cache_dir)

    parsed_url = urlparse(url)
    filename = os.path.join(cache_dir, os.path.basename(parsed_url.path))

    if os.path.exists(filename):
        console.print(f"Using cached file: {filename}")
        return filename

    console.print(f"Downloading PDF from {url}...")
    response = requests.get(url, stream=True)
    with open(filename, 'wb') as file:
        for chunk in response.iter_content(chunk_size=8192):
            file.write(chunk)

    console.print(f"PDF downloaded and saved as {filename}")
    return filename

def extract_text_from_pdf(pdf_path):
    console.print(f"Extracting text from PDF: {pdf_path}")
    text = ""
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        for page in reader.pages:
            text += page.extract_text()
    return text

def initialize_openai_client():
    api_key = os.getenv("OPENAI_API_KEY")
    base_url = os.getenv("OPENAI_API_URL")
    model_name = os.getenv("OPENAI_API_REASONER")

    if not api_key or not base_url or not model_name:
        console.print("Error: Please set OPENAI_API_KEY, OPENAI_API_URL, and OPENAI_API_MODEL environment variables.")
        sys.exit(1)

    return OpenAI(api_key=api_key, base_url=base_url), model_name

def ask_question(client, model_name, content, question, chat_history=[]):
    messages = [
        {"role": "system", "content": "You are a helpful assistant. The following is content from a text file, followed by a conversation history and a new question."},
        {"role": "user", "content": f"Document Content:\nvvvvv\n{content[:60000] if len(content) > 60000 else content}\n^^^^^"}
    ]
    
    # Add chat history
    for q, a in chat_history:
        messages.append({"role": "user", "content": q})
        messages.append({"role": "assistant", "content": a})
        
    # Add current question
    messages.append({"role": "user", "content": f"New Question: {question}"})

    response = client.chat.completions.create(
        model=model_name,
        messages=messages,
        stream=True
    )

    return response

def pretty_sympify(content):
    return content
    # extract math formula from content, sympify them and insert back into text
    # all math formulas are enclosed in [ ]
    math_formulas = [formula for formula in content.split("[") if "]" in formula]

    for formula in math_formulas:
        content = content.replace(formula, pretty(sympify(formula)))
    return content

class ChatApp(App):
    """A simple app to chat with documents using OpenAI's Chat API."""
    """There are three windows from top down:
      PDF: Show the PDF content
      History: Show the chat history, question and answer shown in different color
      Input: Input field to input question
    """
    def __init__(self):
        self.history_window = Markdown()
        self.history_window.styles.height = "1fr"
        self.input_window = Input(disabled=True)
        self.input_window.styles.height = 3
        self.status = Label()
        self.client, self.model_name = initialize_openai_client()
        self.markdown_text = ""
        self.chat_history = []
        self.cache_dir = os.path.expanduser("~/.cache/chatwith")
        os.makedirs(self.cache_dir, exist_ok=True)
        super().__init__()

    def compose(self) -> ComposeResult:
        yield self.status
        yield self.history_window
        yield self.input_window

    def get_content_type(self, url_or_path):
        """Detect content type from file extension or HTTP headers"""
        if url_or_path.startswith(("http://", "https://")):
            try:
                response = requests.head(url_or_path, allow_redirects=True)
                content_type = response.headers.get('Content-Type', '')
                if 'pdf' in content_type:
                    return 'pdf'
                elif 'text/html' in content_type:
                    return 'html'
            except Exception as e:
                console.print(f"Error detecting content type: {e}")
                return 'unknown'
        else:
            if url_or_path.lower().endswith('.pdf'):
                return 'pdf'
            elif url_or_path.lower().endswith(('.txt', '.md')):
                return 'text'
        return 'unknown'

    def extract_webpage_text(self, html_content):
        """Extract main content from HTML using BeautifulSoup"""
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # Remove unwanted elements
        for element in soup(['script', 'style', 'nav', 'footer', 'header', 'aside']):
            element.decompose()
            
        # Get text from main content areas
        main_content = soup.find('article') or soup.find('main') or soup.body
        return main_content.get_text(separator='\n', strip=True) if main_content else ""

    @work(thread=True)
    def load_content(self):
        self.call_from_thread(self.status.update, "Loading content...")
        input_arg = sys.argv[1]
        
        content_type = self.get_content_type(input_arg)
        
        if content_type == 'pdf':
            # Handle PDF files (existing functionality)
            if input_arg.startswith(("http://", "https://")):
                self.call_from_thread(self.status.update, "Downloading PDF...")
                file_path = download_pdf(input_arg)
            else:
                file_path = input_arg

            if not os.path.exists(file_path):
                self.call_from_thread(self.status.update, f"Error: File not found: {file_path}")
                return

            self.call_from_thread(self.status.update, "Extracting text from PDF...")
            self.pdf_text = extract_text_from_pdf(file_path)

        elif content_type == 'html':
            # Handle web pages
            self.call_from_thread(self.status.update, "Downloading webpage...")
            try:
                response = requests.get(input_arg)
                response.raise_for_status()
                self.call_from_thread(self.status.update, "Extracting main content...")
                self.pdf_text = self.extract_webpage_text(response.text)
            except Exception as e:
                self.call_from_thread(self.status.update, f"Error loading webpage: {str(e)}")
                return

        elif content_type == 'text':
            # Handle local text files
            try:
                with open(input_arg, 'r', encoding='utf-8') as f:
                    self.pdf_text = f.read()
            except Exception as e:
                self.call_from_thread(self.status.update, f"Error reading text file: {str(e)}")
                return

        else:
            self.call_from_thread(self.status.update, "Unsupported file type")
            return

        self.input_window.disabled = False
        self.call_from_thread(self.status.update, "Ready")
        self.call_from_thread(self.input_window.focus)

    @work(thread=True)
    def answer_question(self, question):
        # Save chat history to cache
        cache_file = os.path.join(self.cache_dir, "history.json")
        try:
            with open(cache_file, 'w') as f:
                json.dump(self.chat_history, f)
        except Exception as e:
            console.print(f"Error saving chat history: {e}")

        response = ask_question(self.client, self.model_name, self.pdf_text, question, self.chat_history)
        self.chat_history.append((question, ""))  # Add question before getting answer
        self.markdown_text += f"\n\n---\n# {question}\n---\n"
        answer_text = ""
        think_text = ""
        for chunk in response:
            if hasattr(chunk.choices[0].delta, 'reasoning_content'):
                reasoning_content = chunk.choices[0].delta.reasoning_content
                if reasoning_content != None:
                    think_text += reasoning_content
            if chunk.choices[0].delta.content:
                answer_text += chunk.choices[0].delta.content
            quote_cot_content = "" if think_text=="" else "\n".join([f"> {line}" for line in think_text.split("\n")])
            self.call_from_thread(self.history_window.update, f"{self.markdown_text}{quote_cot_content}{answer_text}")
            self.history_window.scroll_y = self.history_window.max_scroll_y
        self.markdown_text += answer_text
        self.call_from_thread(self.history_window.update, self.markdown_text)
        self.history_window.scroll_y = self.history_window.max_scroll_y
        self.input_window.disabled = False
        self.call_from_thread(self.status.update, "Ready")

    async def on_mount(self) -> None:
        self.load_content()

    def on_key(self, event):
        if event.key == "enter":
            user_input = self.input_window.value
            self.status.update(f"Answering question: {user_input}")
            self.input_window.value = ""
            self.input_window.disabled = True
            self.answer_question(user_input)

    def on_mouse_scroll(self, event):
        self.history_window.scroll_y += event.delta.y * 3

if __name__ == "__main__":
    app = ChatApp()
    app.run()
